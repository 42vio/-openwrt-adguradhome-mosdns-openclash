en_mode=$(uci -q get openclash.config.en_mode)
proxy_port=$(uci -q get openclash.config.proxy_port)
FW4=FW4=$(command -v fw4)

if [ "$en_mode" == "fake-ip" ]; then
    LOG_OUT "update telegram ipset"
    /etc/mosdns/rule/geoip2ipset.sh /etc/openclash/GeoIP.dat telegram
    LOG_OUT "update netflix ipset"
    /etc/mosdns/rule/geoip2ipset.sh /etc/openclash/GeoIP.dat netflix

    if [ -n "$FW4" ]; then
    	LOG_OUT "FW4 * limit route to only fake ips with proxy port $proxy_port"
    	LOG_OUT "deleting nft rule handle $handle"
    	handle=$(nft -a list chain inet fw4 openclash | grep 'ip protocol tcp counter' | awk '{print $NF}')
    	nft delete rule inet fw4 openclash handle $handle
	LOG_OUT "add telegram nft rule"
    	nft add rule inet fw4 openclash ip protocol tcp ip daddr @telegram counter redirect to $proxy_port
	LOG_OUT "add netflix nft rule"
	nft add rule inet fw4 openclash ip protocol tcp ip daddr @netflix counter redirect to $proxy_port
    else
    	LOG_OUT "limit route to only fake ips with proxy port $proxy_port"
    	iptables -t nat -D openclash -p tcp -j REDIRECT --to-ports $proxy_port
    	sleep 1
	LOG_OUT "add telegram iptables"
    	iptables -t nat -A openclash -m set --match-set telegram dst -p tcp -j REDIRECT --to-ports $proxy_port
    	sleep 1
	LOG_OUT "add netflix iptables"
    	iptables -t nat -A openclash -m set --match-set netflix dst -p tcp -j REDIRECT --to-ports $proxy_port
    	sleep 1
    fi
fi

#  停止AdguradHome
LOG_OUT "stop adguardhome"
/etc/init.d/AdGuardHome stop
sleep 1

#  开启AdguradHome
LOG_OUT "start adguardhome"
/etc/init.d/AdGuardHome start
sleep 1

# 停止Mosdns
LOG_OUT "stop mosdns"
/etc/init.d/mosdns stop
sleep 1

# 开启Mosdns
LOG_OUT "start mosdns"
/etc/init.d/mosdns start
sleep 1

# 重载Mosdns
LOG_OUT "reload mosdns"
/etc/init.d/mosdns reload
sleep 1
